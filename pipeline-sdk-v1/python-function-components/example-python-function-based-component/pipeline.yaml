apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: calculation-pipeline-
  annotations: {pipelines.kubeflow.org/kfp_sdk_version: 1.8.17, pipelines.kubeflow.org/pipeline_compilation_time: '2022-12-15T09:34:44.832118',
    pipelines.kubeflow.org/pipeline_spec: '{"description": "An example pipeline that
      performs arithmetic calculations.", "inputs": [{"default": "1", "name": "a",
      "optional": true}, {"default": "7", "name": "b", "optional": true}, {"default":
      "17", "name": "c", "optional": true}], "name": "Calculation pipeline"}'}
  labels: {pipelines.kubeflow.org/kfp_sdk_version: 1.8.17}
spec:
  entrypoint: calculation-pipeline
  templates:
  - name: add
    container:
      args: [--a, '{{inputs.parameters.a}}', --b, '4', '----output-paths', /tmp/outputs/Output/data]
      command:
      - sh
      - -ec
      - |
        program_path=$(mktemp)
        printf "%s" "$0" > "$program_path"
        python3 -u "$program_path" "$@"
      - |
        def add(a, b):
            '''Calculates sum of two arguments'''
            return a + b

        def _serialize_float(float_value: float) -> str:
            if isinstance(float_value, str):
                return float_value
            if not isinstance(float_value, (float, int)):
                raise TypeError('Value "{}" has type "{}" instead of float.'.format(
                    str(float_value), str(type(float_value))))
            return str(float_value)

        import argparse
        _parser = argparse.ArgumentParser(prog='Add', description='Calculates sum of two arguments')
        _parser.add_argument("--a", dest="a", type=float, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("--b", dest="b", type=float, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("----output-paths", dest="_output_paths", type=str, nargs=1)
        _parsed_args = vars(_parser.parse_args())
        _output_files = _parsed_args.pop("_output_paths", [])

        _outputs = add(**_parsed_args)

        _outputs = [_outputs]

        _output_serializers = [
            _serialize_float,

        ]

        import os
        for idx, output_file in enumerate(_output_files):
            try:
                os.makedirs(os.path.dirname(output_file))
            except OSError:
                pass
            with open(output_file, 'w') as f:
                f.write(_output_serializers[idx](_outputs[idx]))
      image: python:3.7
    inputs:
      parameters:
      - {name: a}
    outputs:
      parameters:
      - name: add-Output
        valueFrom: {path: /tmp/outputs/Output/data}
      artifacts:
      - {name: add-Output, path: /tmp/outputs/Output/data}
    metadata:
      labels:
        pipelines.kubeflow.org/kfp_sdk_version: 1.8.17
        pipelines.kubeflow.org/pipeline-sdk-type: kfp
        pipelines.kubeflow.org/enable_caching: "true"
      annotations: {pipelines.kubeflow.org/component_spec: '{"description": "Calculates
          sum of two arguments", "implementation": {"container": {"args": ["--a",
          {"inputValue": "a"}, "--b", {"inputValue": "b"}, "----output-paths", {"outputPath":
          "Output"}], "command": ["sh", "-ec", "program_path=$(mktemp)\nprintf \"%s\"
          \"$0\" > \"$program_path\"\npython3 -u \"$program_path\" \"$@\"\n", "def
          add(a, b):\n    ''''''Calculates sum of two arguments''''''\n    return
          a + b\n\ndef _serialize_float(float_value: float) -> str:\n    if isinstance(float_value,
          str):\n        return float_value\n    if not isinstance(float_value, (float,
          int)):\n        raise TypeError(''Value \"{}\" has type \"{}\" instead of
          float.''.format(\n            str(float_value), str(type(float_value))))\n    return
          str(float_value)\n\nimport argparse\n_parser = argparse.ArgumentParser(prog=''Add'',
          description=''Calculates sum of two arguments'')\n_parser.add_argument(\"--a\",
          dest=\"a\", type=float, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"--b\",
          dest=\"b\", type=float, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"----output-paths\",
          dest=\"_output_paths\", type=str, nargs=1)\n_parsed_args = vars(_parser.parse_args())\n_output_files
          = _parsed_args.pop(\"_output_paths\", [])\n\n_outputs = add(**_parsed_args)\n\n_outputs
          = [_outputs]\n\n_output_serializers = [\n    _serialize_float,\n\n]\n\nimport
          os\nfor idx, output_file in enumerate(_output_files):\n    try:\n        os.makedirs(os.path.dirname(output_file))\n    except
          OSError:\n        pass\n    with open(output_file, ''w'') as f:\n        f.write(_output_serializers[idx](_outputs[idx]))\n"],
          "image": "python:3.7"}}, "inputs": [{"name": "a", "type": "Float"}, {"name":
          "b", "type": "Float"}], "name": "Add", "outputs": [{"name": "Output", "type":
          "Float"}]}', pipelines.kubeflow.org/component_ref: '{}', pipelines.kubeflow.org/arguments.parameters: '{"a":
          "{{inputs.parameters.a}}", "b": "4"}'}
  - name: add-2
    container:
      args: [--a, '{{inputs.parameters.my-divmod-quotient}}', --b, '{{inputs.parameters.c}}',
        '----output-paths', /tmp/outputs/Output/data]
      command:
      - sh
      - -ec
      - |
        program_path=$(mktemp)
        printf "%s" "$0" > "$program_path"
        python3 -u "$program_path" "$@"
      - |
        def add(a, b):
            '''Calculates sum of two arguments'''
            return a + b

        def _serialize_float(float_value: float) -> str:
            if isinstance(float_value, str):
                return float_value
            if not isinstance(float_value, (float, int)):
                raise TypeError('Value "{}" has type "{}" instead of float.'.format(
                    str(float_value), str(type(float_value))))
            return str(float_value)

        import argparse
        _parser = argparse.ArgumentParser(prog='Add', description='Calculates sum of two arguments')
        _parser.add_argument("--a", dest="a", type=float, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("--b", dest="b", type=float, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("----output-paths", dest="_output_paths", type=str, nargs=1)
        _parsed_args = vars(_parser.parse_args())
        _output_files = _parsed_args.pop("_output_paths", [])

        _outputs = add(**_parsed_args)

        _outputs = [_outputs]

        _output_serializers = [
            _serialize_float,

        ]

        import os
        for idx, output_file in enumerate(_output_files):
            try:
                os.makedirs(os.path.dirname(output_file))
            except OSError:
                pass
            with open(output_file, 'w') as f:
                f.write(_output_serializers[idx](_outputs[idx]))
      image: python:3.7
    inputs:
      parameters:
      - {name: c}
      - {name: my-divmod-quotient}
    outputs:
      artifacts:
      - {name: add-2-Output, path: /tmp/outputs/Output/data}
    metadata:
      labels:
        pipelines.kubeflow.org/kfp_sdk_version: 1.8.17
        pipelines.kubeflow.org/pipeline-sdk-type: kfp
        pipelines.kubeflow.org/enable_caching: "true"
      annotations: {pipelines.kubeflow.org/component_spec: '{"description": "Calculates
          sum of two arguments", "implementation": {"container": {"args": ["--a",
          {"inputValue": "a"}, "--b", {"inputValue": "b"}, "----output-paths", {"outputPath":
          "Output"}], "command": ["sh", "-ec", "program_path=$(mktemp)\nprintf \"%s\"
          \"$0\" > \"$program_path\"\npython3 -u \"$program_path\" \"$@\"\n", "def
          add(a, b):\n    ''''''Calculates sum of two arguments''''''\n    return
          a + b\n\ndef _serialize_float(float_value: float) -> str:\n    if isinstance(float_value,
          str):\n        return float_value\n    if not isinstance(float_value, (float,
          int)):\n        raise TypeError(''Value \"{}\" has type \"{}\" instead of
          float.''.format(\n            str(float_value), str(type(float_value))))\n    return
          str(float_value)\n\nimport argparse\n_parser = argparse.ArgumentParser(prog=''Add'',
          description=''Calculates sum of two arguments'')\n_parser.add_argument(\"--a\",
          dest=\"a\", type=float, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"--b\",
          dest=\"b\", type=float, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"----output-paths\",
          dest=\"_output_paths\", type=str, nargs=1)\n_parsed_args = vars(_parser.parse_args())\n_output_files
          = _parsed_args.pop(\"_output_paths\", [])\n\n_outputs = add(**_parsed_args)\n\n_outputs
          = [_outputs]\n\n_output_serializers = [\n    _serialize_float,\n\n]\n\nimport
          os\nfor idx, output_file in enumerate(_output_files):\n    try:\n        os.makedirs(os.path.dirname(output_file))\n    except
          OSError:\n        pass\n    with open(output_file, ''w'') as f:\n        f.write(_output_serializers[idx](_outputs[idx]))\n"],
          "image": "python:3.7"}}, "inputs": [{"name": "a", "type": "Float"}, {"name":
          "b", "type": "Float"}], "name": "Add", "outputs": [{"name": "Output", "type":
          "Float"}]}', pipelines.kubeflow.org/component_ref: '{}', pipelines.kubeflow.org/arguments.parameters: '{"a":
          "{{inputs.parameters.my-divmod-quotient}}", "b": "{{inputs.parameters.c}}"}'}
  - name: calculation-pipeline
    inputs:
      parameters:
      - {name: a}
      - {name: b}
      - {name: c}
    dag:
      tasks:
      - name: add
        template: add
        arguments:
          parameters:
          - {name: a, value: '{{inputs.parameters.a}}'}
      - name: add-2
        template: add-2
        dependencies: [my-divmod]
        arguments:
          parameters:
          - {name: c, value: '{{inputs.parameters.c}}'}
          - {name: my-divmod-quotient, value: '{{tasks.my-divmod.outputs.parameters.my-divmod-quotient}}'}
      - name: my-divmod
        template: my-divmod
        dependencies: [add]
        arguments:
          parameters:
          - {name: add-Output, value: '{{tasks.add.outputs.parameters.add-Output}}'}
          - {name: b, value: '{{inputs.parameters.b}}'}
  - name: my-divmod
    container:
      args: [--dividend, '{{inputs.parameters.add-Output}}', --divisor, '{{inputs.parameters.b}}',
        '----output-paths', /tmp/outputs/quotient/data, /tmp/outputs/remainder/data,
        /tmp/outputs/mlpipeline_ui_metadata/data, /tmp/outputs/mlpipeline_metrics/data]
      command:
      - sh
      - -ec
      - |
        program_path=$(mktemp)
        printf "%s" "$0" > "$program_path"
        python3 -u "$program_path" "$@"
      - |
        def my_divmod(
          dividend,
          divisor):
            '''Divides two numbers and calculate  the quotient and remainder'''

            # Import the numpy package inside the component function
            import numpy as np

            # Define a helper function
            def divmod_helper(dividend, divisor):
                return np.divmod(dividend, divisor)

            (quotient, remainder) = divmod_helper(dividend, divisor)

            from tensorflow.python.lib.io import file_io
            import json

            # Export a sample tensorboard
            metadata = {
              'outputs' : [{
                'type': 'tensorboard',
                'source': 'gs://ml-pipeline-dataset/tensorboard-train',
              }]
            }

            # Export two metrics
            metrics = {
              'metrics': [{
                  'name': 'quotient',
                  'numberValue':  float(quotient),
                },{
                  'name': 'remainder',
                  'numberValue':  float(remainder),
                }]}

            from collections import namedtuple
            divmod_output = namedtuple('MyDivmodOutput',
                ['quotient', 'remainder', 'mlpipeline_ui_metadata',
                 'mlpipeline_metrics'])
            return divmod_output(quotient, remainder, json.dumps(metadata),
                                 json.dumps(metrics))

        def _serialize_float(float_value: float) -> str:
            if isinstance(float_value, str):
                return float_value
            if not isinstance(float_value, (float, int)):
                raise TypeError('Value "{}" has type "{}" instead of float.'.format(
                    str(float_value), str(type(float_value))))
            return str(float_value)

        import argparse
        _parser = argparse.ArgumentParser(prog='My divmod', description='Divides two numbers and calculate  the quotient and remainder')
        _parser.add_argument("--dividend", dest="dividend", type=float, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("--divisor", dest="divisor", type=float, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("----output-paths", dest="_output_paths", type=str, nargs=4)
        _parsed_args = vars(_parser.parse_args())
        _output_files = _parsed_args.pop("_output_paths", [])

        _outputs = my_divmod(**_parsed_args)

        _output_serializers = [
            _serialize_float,
            _serialize_float,
            str,
            str,

        ]

        import os
        for idx, output_file in enumerate(_output_files):
            try:
                os.makedirs(os.path.dirname(output_file))
            except OSError:
                pass
            with open(output_file, 'w') as f:
                f.write(_output_serializers[idx](_outputs[idx]))
      image: tensorflow/tensorflow:1.11.0-py3
    inputs:
      parameters:
      - {name: add-Output}
      - {name: b}
    outputs:
      parameters:
      - name: my-divmod-quotient
        valueFrom: {path: /tmp/outputs/quotient/data}
      artifacts:
      - {name: mlpipeline-ui-metadata, path: /tmp/outputs/mlpipeline_ui_metadata/data}
      - {name: mlpipeline-metrics, path: /tmp/outputs/mlpipeline_metrics/data}
      - {name: my-divmod-quotient, path: /tmp/outputs/quotient/data}
      - {name: my-divmod-remainder, path: /tmp/outputs/remainder/data}
    metadata:
      labels:
        pipelines.kubeflow.org/kfp_sdk_version: 1.8.17
        pipelines.kubeflow.org/pipeline-sdk-type: kfp
        pipelines.kubeflow.org/enable_caching: "true"
      annotations: {pipelines.kubeflow.org/component_spec: '{"description": "Divides
          two numbers and calculate  the quotient and remainder", "implementation":
          {"container": {"args": ["--dividend", {"inputValue": "dividend"}, "--divisor",
          {"inputValue": "divisor"}, "----output-paths", {"outputPath": "quotient"},
          {"outputPath": "remainder"}, {"outputPath": "mlpipeline_ui_metadata"}, {"outputPath":
          "mlpipeline_metrics"}], "command": ["sh", "-ec", "program_path=$(mktemp)\nprintf
          \"%s\" \"$0\" > \"$program_path\"\npython3 -u \"$program_path\" \"$@\"\n",
          "def my_divmod(\n  dividend,\n  divisor):\n    ''''''Divides two numbers
          and calculate  the quotient and remainder''''''\n\n    # Import the numpy
          package inside the component function\n    import numpy as np\n\n    # Define
          a helper function\n    def divmod_helper(dividend, divisor):\n        return
          np.divmod(dividend, divisor)\n\n    (quotient, remainder) = divmod_helper(dividend,
          divisor)\n\n    from tensorflow.python.lib.io import file_io\n    import
          json\n\n    # Export a sample tensorboard\n    metadata = {\n      ''outputs''
          : [{\n        ''type'': ''tensorboard'',\n        ''source'': ''gs://ml-pipeline-dataset/tensorboard-train'',\n      }]\n    }\n\n    #
          Export two metrics\n    metrics = {\n      ''metrics'': [{\n          ''name'':
          ''quotient'',\n          ''numberValue'':  float(quotient),\n        },{\n          ''name'':
          ''remainder'',\n          ''numberValue'':  float(remainder),\n        }]}\n\n    from
          collections import namedtuple\n    divmod_output = namedtuple(''MyDivmodOutput'',\n        [''quotient'',
          ''remainder'', ''mlpipeline_ui_metadata'',\n         ''mlpipeline_metrics''])\n    return
          divmod_output(quotient, remainder, json.dumps(metadata),\n                         json.dumps(metrics))\n\ndef
          _serialize_float(float_value: float) -> str:\n    if isinstance(float_value,
          str):\n        return float_value\n    if not isinstance(float_value, (float,
          int)):\n        raise TypeError(''Value \"{}\" has type \"{}\" instead of
          float.''.format(\n            str(float_value), str(type(float_value))))\n    return
          str(float_value)\n\nimport argparse\n_parser = argparse.ArgumentParser(prog=''My
          divmod'', description=''Divides two numbers and calculate  the quotient
          and remainder'')\n_parser.add_argument(\"--dividend\", dest=\"dividend\",
          type=float, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"--divisor\",
          dest=\"divisor\", type=float, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"----output-paths\",
          dest=\"_output_paths\", type=str, nargs=4)\n_parsed_args = vars(_parser.parse_args())\n_output_files
          = _parsed_args.pop(\"_output_paths\", [])\n\n_outputs = my_divmod(**_parsed_args)\n\n_output_serializers
          = [\n    _serialize_float,\n    _serialize_float,\n    str,\n    str,\n\n]\n\nimport
          os\nfor idx, output_file in enumerate(_output_files):\n    try:\n        os.makedirs(os.path.dirname(output_file))\n    except
          OSError:\n        pass\n    with open(output_file, ''w'') as f:\n        f.write(_output_serializers[idx](_outputs[idx]))\n"],
          "image": "tensorflow/tensorflow:1.11.0-py3"}}, "inputs": [{"name": "dividend",
          "type": "Float"}, {"name": "divisor", "type": "Float"}], "name": "My divmod",
          "outputs": [{"name": "quotient", "type": "Float"}, {"name": "remainder",
          "type": "Float"}, {"name": "mlpipeline_ui_metadata", "type": "UI_metadata"},
          {"name": "mlpipeline_metrics", "type": "Metrics"}]}', pipelines.kubeflow.org/component_ref: '{}',
        pipelines.kubeflow.org/arguments.parameters: '{"dividend": "{{inputs.parameters.add-Output}}",
          "divisor": "{{inputs.parameters.b}}"}'}
  arguments:
    parameters:
    - {name: a, value: '1'}
    - {name: b, value: '7'}
    - {name: c, value: '17'}
  serviceAccountName: pipeline-runner
