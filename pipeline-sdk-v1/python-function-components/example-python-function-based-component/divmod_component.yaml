name: My divmod
description: Divides two numbers and calculate  the quotient and remainder
inputs:
- {name: dividend, type: Float}
- {name: divisor, type: Float}
outputs:
- {name: quotient, type: Float}
- {name: remainder, type: Float}
- {name: mlpipeline_ui_metadata, type: UI_metadata}
- {name: mlpipeline_metrics, type: Metrics}
implementation:
  container:
    image: tensorflow/tensorflow:1.11.0-py3
    command:
    - sh
    - -ec
    - |
      program_path=$(mktemp)
      printf "%s" "$0" > "$program_path"
      python3 -u "$program_path" "$@"
    - |
      def my_divmod(
        dividend,
        divisor):
          '''Divides two numbers and calculate  the quotient and remainder'''

          # Import the numpy package inside the component function
          import numpy as np

          # Define a helper function
          def divmod_helper(dividend, divisor):
              return np.divmod(dividend, divisor)

          (quotient, remainder) = divmod_helper(dividend, divisor)

          from tensorflow.python.lib.io import file_io
          import json

          # Export a sample tensorboard
          metadata = {
            'outputs' : [{
              'type': 'tensorboard',
              'source': 'gs://ml-pipeline-dataset/tensorboard-train',
            }]
          }

          # Export two metrics
          metrics = {
            'metrics': [{
                'name': 'quotient',
                'numberValue':  float(quotient),
              },{
                'name': 'remainder',
                'numberValue':  float(remainder),
              }]}

          from collections import namedtuple
          divmod_output = namedtuple('MyDivmodOutput',
              ['quotient', 'remainder', 'mlpipeline_ui_metadata',
               'mlpipeline_metrics'])
          return divmod_output(quotient, remainder, json.dumps(metadata),
                               json.dumps(metrics))

      def _serialize_float(float_value: float) -> str:
          if isinstance(float_value, str):
              return float_value
          if not isinstance(float_value, (float, int)):
              raise TypeError('Value "{}" has type "{}" instead of float.'.format(
                  str(float_value), str(type(float_value))))
          return str(float_value)

      import argparse
      _parser = argparse.ArgumentParser(prog='My divmod', description='Divides two numbers and calculate  the quotient and remainder')
      _parser.add_argument("--dividend", dest="dividend", type=float, required=True, default=argparse.SUPPRESS)
      _parser.add_argument("--divisor", dest="divisor", type=float, required=True, default=argparse.SUPPRESS)
      _parser.add_argument("----output-paths", dest="_output_paths", type=str, nargs=4)
      _parsed_args = vars(_parser.parse_args())
      _output_files = _parsed_args.pop("_output_paths", [])

      _outputs = my_divmod(**_parsed_args)

      _output_serializers = [
          _serialize_float,
          _serialize_float,
          str,
          str,

      ]

      import os
      for idx, output_file in enumerate(_output_files):
          try:
              os.makedirs(os.path.dirname(output_file))
          except OSError:
              pass
          with open(output_file, 'w') as f:
              f.write(_output_serializers[idx](_outputs[idx]))
    args:
    - --dividend
    - {inputValue: dividend}
    - --divisor
    - {inputValue: divisor}
    - '----output-paths'
    - {outputPath: quotient}
    - {outputPath: remainder}
    - {outputPath: mlpipeline_ui_metadata}
    - {outputPath: mlpipeline_metrics}
